
getlongesttranscript.py

Gotten from online (link at the top of the script). Stores all the transcripts in the dictionary associated with each genes. Stores the longest transcript.

#run with command:  cat filename.gff | python3 /home/leann/lib/ortho_finder_butterflies/scripts/getlongesttranscript.py | cut -f2
#
#	***NOTE: "cut -f2" is optional. Without that option, all four columns of information about the transcript will print to the screen. f2 is the second column and 
 #               should be the longest transcript ids.
#		f1, f3, and f4 will print out the other columns information individually. The list printed to the screen can be fed into a file using '>'. 

Updated run command on 5/30/2022:
run with command: python3 [gfffilename] > txmap

	***NOTE: use cut -f# to retrieve the column of interest for txmap
	***NOTE: Worked best with annotations of lower quality because it stores simple ID's. Also doesn't need "group" names.

###############################################

getlongest_run1.py

run command: cat [gff file name] | python3 /home/leann/lib/ortho_finder_butterflies/scripts/getlongest_run1.py 

	***NOTE: The above line will print the mapped output to the screen. Use the "cut" command (described for getlongesttranscript.py) to get the desired column
                 and '>' pipe into an output file.

	***NOTE: Better version of getlongesttranscript.py for well-annotated genomes.

	Like getlongesttranscript.py, this file finds the longest version of a transcript using a gff file. It provides the gene name, transcript name, chromosome, start and end location. In addition, this script stores XP numbers from the gff file whenever "CDS" is found. In a dictionary with th eparent ID, it prints out another column with the XP number that goes with
	the longest transcript.
###############################################
gtf_getlongest.py

run command: cat [gtf file name] | python3 /home/leann/lib/ortho_finder_butterflies/script/getlongest_run1.py

Runs very similarly to the other getlongest python scripts, but it should be compatible with GTF file formats instead of gff or gff3.


################################################
make_new_proteome.py
***NOTE: name of script is slightly incorrect. It does not have to be a proteome.
run command: python3 make_new_proteome.py [cds file name] [list of longest transcript file name] [desired outputfile name]


	This script cross references the list of the longest transcripts with the record id's in the cds file. It then writes out the
	records of the all the cds's that match the longest trancripts.

	OUTPUT: Produces a fasta file with only the longest transcript.

#################################################
updateproteome_withxp.py
	
	This runs very similarly to make_new_proteome.py, but it parses a list and cross references your two files using XP numbers instead.

	run command: python3 updateproteome_withxp.py [protein file name] [list of longest transcript XP numbers] [desire output file name]

##################################################
longest_pipeline.sh
NOTE: This didn't work with most cases of my files. Personally, I would skip them and run them all individually, but I only had to do like 10 of them.

Format to run: needs a file filled with directories named after the respective species. 
Files should be named: speciesname.faa and speciesname.gff.
This script will run getlongesttranscript.py and make_new_proteomes together in a pipeline. 


**NOTE: while this is a cool attempt to automate, sometimes the transcript ID gotten from the .gff doesn't match 
what is the protein files without some editing. Automation may not work, but can be attempted. The rest of them
can be done by hand.

######################################################


5/30/2022

gff_longestCDSinfo.py

	Run command: python3 gff_longestCDSinfo.py [gff file name] [output file name]
	Description: This script has similar behaviour as the previous scripts. It identifies the longest CDS transcript from
		the gff annotation file. For each gene, it builds dictionaries for each mRNA/transcript feature within that gene.
		If there is more than mRNA, it can determine which mRNA has the longest CDS sequences within it. That one is the
		the longest transcript.

	Output file: This script outputs information valuable for
			1. finding the longest transcript for each gene
			2. determine all the CDS locations for the longest transcript and their corresponding reading frames
				Each CDS has its start and stop as such: "start:stop"
				all the CDS are separated by a ";"
				The reading frame has the same format. 
			3. Outfile file has the following fields:
				gene id: gene that the longest transcript belongs to
				cds id:	cds id for the longest transcript. valuable for finding the gene id in the cds fasta file
				chrom:	chromosome for that particular gene
				pos:	list of CDS positions
				frame:	reading frame for each CDS position
5/30/2022
gtf_longestCDSinfo.py
	Run command: python3 gtf_longestCDSinfo.py [gtf file name] [output file name]
	Description: Runs the same as gff_longestCDSinfo.py but is adjusted for the gtf format. 
	Output file: The same as above. The main difference as that the gene id is not different from the transcript id.

5/31/2022
maps_getlongestcolumn.py
	Run command: python3 maps_getlongestcolumn.py [CDS output map] [output file name]
		Description: Uses string search to pull the second column for the CDS ID's. These CDS ID's are used to edit FASTA files.
		Potential Update: I'd like to automate this or add an input to choose the column. I'll have to see how often the second column works.

auto_gff_getinfo.sh
	Run command: ./auto_gff_getinfo.sh WITHIN DIRECTORY
		Description: Created CDS maps automatically for a directory of .gff / .gtf files. Must be run inside
				the directory of interest.
		Output: Creates file names as [.gff/gtf file name.CDS.output]
		Note: The script will find all files that contain .gff or .gtf, so if this is re-run MAKE SURE to delete
			the CDS.output files.
auto_create_txlist.sh
	Run command: ./auto_gff_getinfo.sh WITHIN DIRECTORy
		Description: Creates a list of ID's from the second column of CDS.output files within a directory.
		Note: If you don't need the second, run maps_getlongestcolumn.py by hand and edit the string search for 
			a different column number.
